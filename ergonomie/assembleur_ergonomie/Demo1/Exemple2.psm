			; myProgram.psm
			;
			; This is the start of 'myProgram' for KCPSM6
			;
			; 4 Switches
			CONSTANT Switches_port, 01
			;
			; 4 Buttons
			CONSTANT Buttons_port, 00
			;
			; 4 LEDs
			CONSTANT LED_port, 02
			;
			; 8 Pmod 8LD LEDs
			CONSTANT Pmod_8LD_port, 04
			;
			; Bit assignements for each LED/button
			CONSTANT bit0, 00000001'b  ;
			CONSTANT bit1, 00000010'b  ;
			CONSTANT bit2, 00000100'b  ;
			CONSTANT bit3, 00001000'b  ;
			CONSTANT bit4, 00010000'b  ;
			CONSTANT bit5, 00100000'b  ;
			CONSTANT bit6, 01000000'b  ;
			CONSTANT bit7, 10000000'b  ;
			;
			;
init:		LOAD s0, 00						; initialize s1 to 00 hex
			LOAD s1, 01010000'b 			; initialize s1 with bit4 and bit6 at high
			;
start:  	INPUT s0, Switches_port
			OUTPUT s0, LED_port				; display 4-bits switches value on Leds (ZYBO Z710) 
			;
			INPUT s0, Buttons_port			; read 4-bits buttons value  into register s0
			AND s1, 11110000'b				; clear s1 4-LSB
			OR s1, s0						; Copy into s1 4-LSB the 4-bits buttons value stored in s0 by using OR
			;
			AND s1, ~bit4					; reset bit4 but preserve all other bits - turn Led4 OFF on Pmod 8LD
			;
			XOR s1, bit5					; flash bit5 ON and OFF but preserve all other bits
			;
			XOR s1, bit6					; flash bit6 ON and OFF but preserve all other bits - flash in opposition with bit5
			;
			OR s1, bit7						; set bit5 and preserve all other bits - turn Led5 ON on Pmod 8LD
			OUTPUT s1, Pmod_8LD_port 		; display s1 register value on Pmod 8LD
			;
			CALL delay_1s					; add 1-second delay
			JUMP start
			;
			;
			; Software delay of 1 second
			;
			; ZYBO Z7-10 is fitted with a 125 MHz clock.
			; 1 second is 125,000,000 clock cycles.
			; KCPSM6 will execute 62,500,000 instructions (an instruction takes 2 clock cycles).
			;
			; The delay loop below decrements the 24-bit value held in registers [s4,s3,s2] 
			; until it reaches zero and this loop consists of 4 instructions (i.e. 8 clock cycles).
			;
			; Therefore the loop needs to count 15,625,000 times (i.e. 125,000,000/8) 
			; so the start value is ‭EE6B28‬ hex.
			;
delay_1s:	LOAD s4, EE
			LOAD s3, 6B
			LOAD s2, 28
delay_loop:	SUB s2, 1'd
			SUBCY s3, 0'd
			SUBCY s4, 0'd
			JUMP NZ, delay_loop				; Jump to delay_loop as long as the Zero flag is not set
			RETURN